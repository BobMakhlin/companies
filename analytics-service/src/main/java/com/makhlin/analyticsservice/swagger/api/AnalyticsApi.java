/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.46).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.makhlin.analyticsservice.swagger.api;

import com.makhlin.analyticsservice.swagger.model.*;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import java.util.UUID;


@Validated
public interface AnalyticsApi {

    AnalyticsApiDelegate getDelegate();

    @Operation(summary = "Get Aggregated Statistics on Address Categories", description = "Retrieves aggregated counts of address categories (e.g., \"warehouse\", \"headquarters\").", tags = {"ANALYTICS"})
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Successfully retrieved address category statistics.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = CompanyAddressStatistics.class))),

            @ApiResponse(responseCode = "404", description = "Not Found", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))),

            @ApiResponse(responseCode = "500", description = "Internal Server Error", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class)))})
    @RequestMapping(value = "/v1/companies/{companyId}/addresses",
            produces = {"application/json"},
            method = RequestMethod.GET)
    default ResponseEntity<CompanyAddressStatistics> getCompanyAddresses(@Parameter(in = ParameterIn.PATH, description = "Unique identifier of Company", required = true, schema = @Schema()) @PathVariable("companyId") UUID companyId) {
        return getDelegate().getCompanyAddresses(companyId);
    }


    @Operation(summary = "Get Current Name of the Company", description = "Retrieves the current name of the company.", tags = {"ANALYTICS"})
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Successfully retrieved the current company name.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = CompanyName.class))),

            @ApiResponse(responseCode = "404", description = "Not Found", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))),

            @ApiResponse(responseCode = "500", description = "Internal Server Error", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class)))})
    @RequestMapping(value = "/v1/companies/{companyId}/name",
            produces = {"application/json"},
            method = RequestMethod.GET)
    default ResponseEntity<CompanyName> getCompanyName(@Parameter(in = ParameterIn.PATH, description = "Unique identifier of Company", required = true, schema = @Schema()) @PathVariable("companyId") UUID companyId) {
        return getDelegate().getCompanyName(companyId);
    }


    @Operation(summary = "Get Previous Names of the Company", description = "Retrieves all previous names of the company.", tags = {"ANALYTICS"})
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Successfully retrieved the previous company names.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = CompanyPreviousNames.class))),

            @ApiResponse(responseCode = "404", description = "Not Found", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))),

            @ApiResponse(responseCode = "500", description = "Internal Server Error", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class)))})
    @RequestMapping(value = "/v1/companies/{companyId}/previous-names",
            produces = {"application/json"},
            method = RequestMethod.GET)
    default ResponseEntity<CompanyPreviousNames> getCompanyPreviousNames(@Parameter(in = ParameterIn.PATH, description = "Unique identifier of Company", required = true, schema = @Schema()) @PathVariable("companyId") UUID companyId) {
        return getDelegate().getCompanyPreviousNames(companyId);
    }


    @Operation(summary = "Get Current Status of the Company", description = "Retrieves the current status of the company.", tags = {"ANALYTICS"})
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Successfully retrieved the company status.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = CompanyCurrentStatus.class))),

            @ApiResponse(responseCode = "404", description = "Not Found", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))),

            @ApiResponse(responseCode = "500", description = "Internal Server Error", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class)))})
    @RequestMapping(value = "/v1/companies/{companyId}/status",
            produces = {"application/json"},
            method = RequestMethod.GET)
    default ResponseEntity<CompanyCurrentStatus> getCompanyStatus(@Parameter(in = ParameterIn.PATH, description = "Unique identifier of Company", required = true, schema = @Schema()) @PathVariable("companyId") UUID companyId) {
        return getDelegate().getCompanyStatus(companyId);
    }

}

